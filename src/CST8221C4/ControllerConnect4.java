package CST8221C4;

import java.awt.Frame;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * This class represents the ControllerConnect4 which is the Controller, which handles events generated by user interactions with the GUI. This class
 * contains a switch case which handles menu interactions, it calls the methods to handle the interactions. Also contains implementation of switching languages.
 *
 */
public class ControllerConnect4 {
	private ModelConnect4 model;
	private Connect4 view;
	private ResourceBundle resourceBundle;
	JFrame frame;
	ClientConnect4 client;

	
	/**
	 * Overloaded constructor which initializes the view, model and game board.
	 * @param view, represents the Connect4 class
	 */
	public ControllerConnect4(Connect4 view) { 
		this.view = view; 
		this.model = new ModelConnect4();
		this.model.initializationBoard(); 
		this.view.setModel(model);
		
		

	}

	/**
	 * getter for Model
	 * @return model
	 */
	public ModelConnect4 getModel() { 
		return model; 
	}

	/**
	 * Yet to be implemented
	 */
	public void handleChatInputBox() {
		//UNIMPLEMENTED
	}

	/**
	 * This method is used to handle all possible interactions with the menu items. Uses a switch case structure, and when a menu item is interacted
	 * with, the switch case calls the related method to deal with the action. 
	 * @param menuItem, represents all menu item selection
	 */
	public void handleMenuEvents(String menuItem) {
		switch(menuItem) {
		case"Reset":
			reset();
			break;
		case"Pause":
			pauseTimer();
			break;
		case"English":
			switchToEnglish();
			break;
		case"Persian":
			switchToPersian();
			break;
		case"Instructions":
			displayInstruction();
			break;
		case"Host":
			HandleHostGame();
			break;
		case "Connect":
			HandleConnect();
			break;
		case "Disconnect":
			handleDisconnect();
			break;
		}
		// switch case calling all the menu items
	}

	/**
	 * This method is used to update the view, the view will need to constantly be change due to changes of the state of the board, and
	 * alternating players. 
	 */
	public void updateView() {
		view.updateBoard(model.getGameBoard());
		view.updatePlayerLabels();
	}

	/**
	 * This method is used to check the user play, checks if a token was dropped, and update the board accordingly. Checks if a winner was identified, displays winner
	 * message and game is over. Checks if a draw state was identified, displays draw message and game is over. If winner or draw state wasn't identified then
	 * players should alternate as well as player labels.
	 * @param column, represent game board columns
	 * @return false if not valid play
	 */
	public boolean validatePlay(int column) {

		if(model.dropPiece(column)) {

			view.updateBoard(model.getGameBoard());
			if(model.checkWinner()) {
				view.displayWinner(model.currentPlayer);
			//	model.gameOver();
			}else if (model.checkDraw()) {
				view.displayDraw();
			//	model.gameOver();

			} else {
				model.alternatePlayers();
				view.updatePlayerLabels();
			}

			return true;
		}
		return false;

	}
	/**
	 * This method pauses the timer execution.
	 */
	public void pauseTimer() {

	}

	/**
	 * This method should reset the whole game, if user wants to restart the game. Calls the initializeBoard method from the Model class.
	 */
	public void reset() {
		model.initializationBoard();
		view.resetLabels();
		view.updatePlayerLabels();
		
		updateView();
	}
	/**
	 * This method is used to switch the current language to English. The English language is also known as the default language.
	 * Calls the load language method, to perform switch.
	 */
	public void switchToEnglish() {
		loadLanguage("en");
		updateView();


	}
	/**
	 * This method is used to switch the current language to English. Calls the load language method, to perform switch.
	 */
	public void switchToPersian() {
		loadLanguage("prs");
		updateView();
	}

	/**
	 * Trying to load a resource bundle containing a file which use key-value pair translations.
	 * @param language, the specified language
	 */
	private void loadLanguage(String language) {   
		 Locale locale = new Locale(language);
	     resourceBundle = ResourceBundle.getBundle("language_prs.properties", locale);
	}


	
//	public String getTranslation(String key) {
//		return translate.getProperty(key);
//	}

	/**
	 * This method is used to display instructions on how to win the game, only displays if user interacts with instruction menu item
	 */
	public void displayInstruction() {
		String message=" How to win connect 4?\n "
				+ " Easy! all you need to do is play 4 consecutive tokens, without being interrupted by your opponent. \n"+
				" If none of the players are able to do so, then game ends in a draw.";

		view.displayInstructions(message);
	}
	
	public void HandleHostGame() {
		String player = JOptionPane.showInputDialog("Enter player name: ");
	    String portNumber = JOptionPane.showInputDialog("Enter port number: ");
	    if (player != null && !player.isEmpty() && portNumber != null && !portNumber.isEmpty()) {
	        try {
	            int port = Integer.parseInt(portNumber);
	            ServerConnect4 server = new ServerConnect4();
	            server.startServer(port);
	            //System.out.println("Server started on port " + port);
	        } catch (NumberFormatException e) {
	            JOptionPane.showMessageDialog(null, "Invalid port number. Please enter a valid integer.");
	        } catch (IOException e) {
	            e.printStackTrace();
	            JOptionPane.showMessageDialog(null, "Failed to start the server.");
	        }
	    } else {
	        JOptionPane.showMessageDialog(null, "Player name and port number are required.");
	    }
/*		// should create a pop up allowing user to enter player name and port number
		String player = JOptionPane.showInputDialog("Enter:", "Enter player name: " );
		String portNumber = JOptionPane.showInputDialog("Enter:", "Enter port number: " );
		 // Check if player name and port number are not empty
	    if (player != null && !player.isEmpty() && portNumber != null && !portNumber.isEmpty()) {
	        try {
	            // Parse port number to ensure it's a valid integer
	            int portNumber1 = Integer.parseInt(portNumber);
	            
	            // Now you can proceed with hosting the game using the player name and port number
	            // For example:
	            // hostGame(player, portNumber1);
	            client.connectToServer(player, portNumber1, player); // delete player
	        } catch (NumberFormatException e) {
	            // Handle invalid port number input
	            JOptionPane.showInputDialog("Error:", "Invalid port number. Please enter a valid integer.");
	        }
	    } else {
	        // Handle case where player cancels the input dialog or enters empty values
	        JOptionPane.showInputDialog("Error:", "Player name and port number are required.");
	    } */
	}
		
	
	
	public void HandleConnect() {
		  String player = JOptionPane.showInputDialog("Enter player name: ");
		    String address = JOptionPane.showInputDialog("Enter address: ");
		    String portNumber = JOptionPane.showInputDialog("Enter port number: ");
		    if (player != null && !player.isEmpty() && address != null && !address.isEmpty() && portNumber != null && !portNumber.isEmpty()) {
		        try {
		            int port = Integer.parseInt(portNumber);
		            ClientConnect4 client = new ClientConnect4();
		            client.connectToServer(address, port, player);
		           // System.out.println("Connected to server at " + address + " on port " + port);
		        } catch (NumberFormatException e) {
		            JOptionPane.showMessageDialog(null, "Invalid port number. Please enter a valid integer.");
		        }
		    } else {
		        JOptionPane.showMessageDialog(null, "Player name, address, and port number are required.");
		    }
	/*	// should create a pop up allowing user to enter address, port number and player name
		String player = JOptionPane.showInputDialog("Enter:", "Enter player name: " );
		String address = JOptionPane.showInputDialog("Enter:", "Enter adress: " );
		String portNumber = JOptionPane.showInputDialog("Enter:", "Enter port number: " );
		// Check if player name, address, and port number are not empty
	    if (player != null && !player.isEmpty() && address != null && !address.isEmpty() && portNumber != null && !portNumber.isEmpty()) {
	        try {
	            // Parse port number to ensure it's a valid integer
	            int portNumber2 = Integer.parseInt(portNumber);
	            
	            // Now you can proceed with connecting to the game using the player name, address, and port number
	            // For example:
	            // connectToGame(player, address, portNumber2); // instead connectToClient
	        } catch (NumberFormatException e) {
	            // Handle invalid port number input
	            JOptionPane.showInputDialog("Error:", "Invalid port number. Please enter a valid integer.");
	        }
	    } else {
	        // Handle case where player cancels the input dialog or enters empty values
	        JOptionPane.showInputDialog("Error:", "Player name, address, and port number are required.");
	    } */
	}
	
	public void handleDisconnect() {
		// disconnect connection, call from client 
		String player = JOptionPane.showInputDialog("Bye", "Disconnected Connection" );

	}
}