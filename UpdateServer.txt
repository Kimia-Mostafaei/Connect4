package CST8221.week11;

/*
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

import java.net.*;
import java.io.*;
import java.util.scanner;
/**
 * Class EchoServer
 * @author sousap
 *
 */
public class EchoServer {
	
	/**
	 * Default port.
	 */
	static int PORT = 1000;
	
	/**
	 * Number of port.
	 */
	static int portNumber;
	
	/**
	 * Default constructor.
	 */
	public EchoServer() {
		; // No commands
	}
	
	/**
	 * Main method.
	 * @param args Param arguments.
	 */
    public static void main(String[] args) {
    	if (args == null) {
            portNumber = PORT;    		
    	} else if (args.length < 1) {
            //System.err.println("Usage: java EchoServer <port number>");
            portNumber = PORT;
        } else {
            portNumber = Integer.parseInt(args[0]);
        }
        System.out.println("Starting EchoServer on port " + portNumber);
        
        try (
            ServerSocket serverSocket =
                new ServerSocket(portNumber);
            Socket clientSocket = serverSocket.accept();     // waits for connection
            PrintWriter out =
                new PrintWriter(clientSocket.getOutputStream(), true);                   
            Scanner in = new Scanner(
                new InputStreamReader(clientSocket.getInputStream()));
        ) {
            String inputLine;
			boolean connected = true;
			while(connected&& in.hasNextLine()){
			inputLine = in.nextLine();
			out.println(inputLine);
			if ("BYE".equals(inputLine)) connected = false; # connection quits when user enters BYE
			String[] values = inputLine.split("#"); #dont need
			if(values[0].equals("0")); # dont need 
			}
            while ((inputLine = in.readLine()) != null) {
                out.println(inputLine);
            }
        } catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
                + portNumber + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }
}